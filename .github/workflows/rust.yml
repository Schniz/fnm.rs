name: Rust

on: [push]

jobs:
  fmt:
    runs-on: ubuntu-latest
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
    - uses: actions/checkout@v1
    - name: cargo fmt
      run: cargo fmt -- --check

  unit_tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
    - uses: actions/checkout@v1
    - name: Run tests
      run: cargo test -- --skip=feature_tests

  e2e_tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
    - name: Install Fish and Zsh using brew
      if: "startsWith(matrix.os, 'macOS')"
      run: brew install fish zsh
    - name: Install Fish and Zsh using apt
      if: "startsWith(matrix.os, 'ubuntu')"
      run: sudo apt-get install -y fish zsh
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
    - uses: actions/checkout@v1
    - name: Run tests
      run: cargo test -- feature_tests

  build_release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            os_type: Linux
            filename: fnm
            artifact_name: fnm-linux
            strip: true
          - os: windows-latest
            filename: fnm.exe
            os_type: Windows
            artifact_name: fnm-windows
            strip: false
          - os: macos-latest
            os_type: MacOS
            filename: fnm
            artifact_name: fnm-macos
            strip: true
    name: "Release build for ${{ matrix.os_type }}"
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: stable
    - uses: actions/checkout@v1
    - name: Build release binary
      run: cargo build --release
    - name: Strip binary from debug symbols
      if: matrix.strip
      run: strip target/release/${{ matrix.filename }}
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.artifact_name }}
        path: target/release/${{ matrix.filename }}
